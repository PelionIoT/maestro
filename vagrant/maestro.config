network:
    interfaces:
        - if_name: eth1
          exists: replace
          dhcpv4: false
          ipv4_addr: 10.0.103.103
          ipv4_mask: 24
          hw_addr: "{{ARCH_ETHERNET_MAC}}"
        - if_name: eth2
          exists: replace
          dhcpv4: false
          ipv4_addr: 10.0.102.102
          ipv4_mask: 24
          hw_addr: "{{ARCH_ETHERNET_MAC}}"
devicedb_conn_config:
    devicedb_uri: "https://{{DEVICE_ID}}:9090"
    devicedb_prefix: "vagrant"
    devicedb_bucket: "lww"
    relay_id: "{{DEVICE_ID}}"
    ca_chain: "{{DEVICEDB_SRC}}/hack/certs/myCA.pem"
sys_stats: # system stats intervals
  vm_stats:
    every: "15s"
    name: vm
  disk_stats:
    every: "30s"
    name: disk
symphony:
    sys_stats_count_threshold: 15     # send if you have 15 or more stats queued
    sys_stats_time_threshold: 120000  # every 120 seconds send stuff, no matter what
    client_cert: {{SYMPHONY_CLIENT_CRT}}
    client_key: {{SYMPHONY_CLIENT_KEY}}
    host: "{{SYMPHONY_HOST}}"
targets:
    - file: "/var/log/maestro/maestro.log"
      rotate:
        max_files: 4
        max_file_size: 10000000  # 10MB max file size
        max_total_size: 42000000
        rotate_on_start: true
      delim: "\n"
      format_time: "[%ld:%d] "
      format_level: "<%s> "
      format_tag: "{%s} "
      format_origin: "(%s) "
      filters:
      - levels: warn
        format_pre: "\u001B[33m"    # yellow
        format_post: "\u001B[39m"
      - levels: error
        format_pre: "\u001B[31m"    # red
        format_post: "\u001B[39m"
    - name: "toCloud"  # this is a special target for sending to the cloud. It must send as a JSON
      format_time: "\"timestamp\":%ld%03d, "
      format_level: "\"level\":\"%s\", "
      format_tag: "\"tag\":\"%s\", "
      format_origin: "\"origin\":\"%s\", "
      format_pre_msg: "\"text\":\""
      format_post: "\"},"
      flag_json_escape_strings: true
      filters:
      - levels: all
        format_pre: "{"     # you will wrap this output with { "log": [ OUTPUT ] }
config_end: true
